import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:hotel/presentation/home/admin_drawer.dart'; // Import the AdminDrawer

class AdminBookingDisplayScreen extends StatelessWidget {
  Future<List<Map<String, dynamic>>> fetchUsers() async {
    QuerySnapshot<Map<String, dynamic>> querySnapshot =
        await FirebaseFirestore.instance.collection('users').get();

    List<Map<String, dynamic>> usersList = [];
    querySnapshot.docs.forEach((doc) {
      usersList.add(doc.data());
    });

    return usersList;
  }

  Future<List<Map<String, dynamic>>> fetchRoomBookings() async {
    QuerySnapshot<Map<String, dynamic>> querySnapshot =
        await FirebaseFirestore.instance.collection('roomBookings').get();

    List<Map<String, dynamic>> roomBookingsList = [];
    querySnapshot.docs.forEach((doc) {
      roomBookingsList.add(doc.data());
    });

    return roomBookingsList;
  }

  Future<List<Map<String, dynamic>>> fetchHotelBookings() async {
    QuerySnapshot<Map<String, dynamic>> querySnapshot =
        await FirebaseFirestore.instance.collection('hotelBookings').get();

    List<Map<String, dynamic>> hotelBookingsList = [];
    querySnapshot.docs.forEach((doc) {
      hotelBookingsList.add(doc.data());
    });

    return hotelBookingsList;
  }

  Future<List<Map<String, dynamic>>> fetchPayments() async {
    QuerySnapshot<Map<String, dynamic>> querySnapshot =
        await FirebaseFirestore.instance.collection('payments').get();

    List<Map<String, dynamic>> paymentsList = [];
    querySnapshot.docs.forEach((doc) {
      paymentsList.add(doc.data());
    });

    return paymentsList;
  }

  String formatTimestamp(Timestamp timestamp) {
    DateTime dateTime = timestamp.toDate().toUtc().add(Duration(hours: 3)); // Convert to EAT
    DateFormat dateFormat = DateFormat('yyyy-MM-dd HH:mm:ss');
    return dateFormat.format(dateTime) + ' EAT';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Users Bookings'),
        backgroundColor: Colors.purple[700],
      ),
      drawer: AdminDrawer(), // Use the AdminDrawer widget
      backgroundColor: Colors.purple[100],
      body: FutureBuilder<List<Map<String, dynamic>>>(
        future: fetchUsers(), // Fetch users data
        builder: (context, usersSnapshot) {
          if (usersSnapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }
          if (usersSnapshot.hasError) {
            return Center(child: Text('Error: ${usersSnapshot.error}'));
          }

          // Fetch room bookings data
          return FutureBuilder<List<Map<String, dynamic>>>(
            future: fetchRoomBookings(),
            builder: (context, roomBookingsSnapshot) {
              if (roomBookingsSnapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              }
              if (roomBookingsSnapshot.hasError) {
                return Center(child: Text('Error: ${roomBookingsSnapshot.error}'));
              }

              // Fetch hotel bookings data
              return FutureBuilder<List<Map<String, dynamic>>>(
                future: fetchHotelBookings(),
                builder: (context, hotelBookingsSnapshot) {
                  if (hotelBookingsSnapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  }
                  if (hotelBookingsSnapshot.hasError) {
                    return Center(child: Text('Error: ${hotelBookingsSnapshot.error}'));
                  }

                  // Fetch payments data
                  return FutureBuilder<List<Map<String, dynamic>>>(
                    future: fetchPayments(),
                    builder: (context, paymentsSnapshot) {
                      if (paymentsSnapshot.connectionState == ConnectionState.waiting) {
                        return Center(child: CircularProgressIndicator());
                      }
                      if (paymentsSnapshot.hasError) {
                        return Center(child: Text('Error: ${paymentsSnapshot.error}'));
                      }

                      // Assuming snapshots contain lists of user, room bookings, hotel bookings, and payments data
                      List<Map<String, dynamic>> users = usersSnapshot.data ?? [];
                      List<Map<String, dynamic>> roomBookings = roomBookingsSnapshot.data ?? [];
                      List<Map<String, dynamic>> hotelBookings = hotelBookingsSnapshot.data ?? [];
                      List<Map<String, dynamic>> payments = paymentsSnapshot.data ?? [];

                      // Function to find user details by userId
                      Map<String, dynamic> findUserById(String userId) {
                        return users.firstWhere(
                          (user) => user['userId'] == userId,
                          orElse: () => {
                            'displayName': 'Unknown User',
                            'email': 'Unknown',
                            'phoneNumber': 'N/A',
                          },
                        );
                      }

                      // Function to check if the user has made a payment
                      bool hasUserPaid(String userId) {
                        return payments.any((payment) => payment['userId'] == userId);
                      }

                      // Combine and display all bookings data
                      List<Map<String, dynamic>> allBookings = [
                        ...roomBookings.map((booking) {
                          var user = findUserById(booking['userId']);
                          return {
                            'userName': booking['displayName'],
                            'email': booking['email'],
                            'phoneNumber': booking['phoneNumber'],
                            'bookingType': 'Room Booking',
                            'amount': booking['amount'],
                            'timestamp': booking['timestamp'],
                            'hotelId': null, // Set to null for consistent structure
                            'hotelName': booking['roomName'],
                            'paid': hasUserPaid(booking['userId']),
                          };
                        }),
                        ...hotelBookings.map((booking) {
                          var user = findUserById(booking['userId']);
                          return {
                            'userName': booking['displayName'],
                            'email': booking['email'],
                            'phoneNumber': booking['phoneNumber'],
                            'bookingType': 'Hotel Booking',
                            'amount': booking['amount'],
                            'timestamp': booking['timestamp'],
                            'hotelId': booking['hotelId'],
                            'hotelName': booking['hotelName'],
                            'paid': hasUserPaid(booking['userId']),
                          };
                        }),
                      ];

                      // Calculate summary statistics
                      int numberOfCustomers = users.length;
                      double totalRevenue = payments.map((payment) => payment['amount'] ?? 0).fold(0, (prev, amount) => prev + amount);
                      int totalHotelBookings = hotelBookings.length;
                      int totalRoomBookings = roomBookings.length;

                      // Build styled badges for summary statistics
                      Widget buildBadge(String label, String value, IconData icon, Color color) {
                        return Card(
                          elevation: 4,
                          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                          color: color,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                            child: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(icon, color: Colors.white),
                                SizedBox(width: 8),
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      label,
                                      style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 16),
                                    ),
                                    Text(
                                      value,
                                      style: TextStyle(color: Colors.white, fontSize: 14),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        );
                      }

                      // Build DataTable with combined data
                      return SingleChildScrollView(
                        scrollDirection: Axis.horizontal,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding: const EdgeInsets.all(16.0),
                              child: Text(
                                'Summary Statistics',
                                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                              ),
                            ),
                            SizedBox(height: 10),
                            SingleChildScrollView(
                              scrollDirection: Axis.horizontal,
                              child: Row(
                                children: [
                                  buildBadge('Customers', numberOfCustomers.toString(), Icons.people, Colors.blue),
                                  SizedBox(width: 10),
                                  buildBadge('Revenue', '\KSH ${totalRevenue.toStringAsFixed(2)}', Icons.attach_money, Colors.green),
                                  SizedBox(width: 10),
                                  buildBadge('Hotel Bookings', totalHotelBookings.toString(), Icons.hotel, Colors.orange),
                                  SizedBox(width: 10),
                                  buildBadge('Room Bookings', totalRoomBookings.toString(), Icons.room, Colors.purple),
                                ],
                              ),
                            ),
                            SizedBox(height: 20),
                            SingleChildScrollView(
                              scrollDirection: Axis.horizontal,
                              child: DataTable(
                                columns: [
                                  DataColumn(label: Text('User Name', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Email', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Phone Number', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Booking Type', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Amount', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Booked Date', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Hotel Name', style: TextStyle(fontWeight: FontWeight.bold))),
                                  DataColumn(label: Text('Paid', style: TextStyle(fontWeight: FontWeight.bold))),
                                ],
                                rows: allBookings.map((booking) {
                                  return DataRow(cells: [
                                    DataCell(Text(booking['userName'] ?? 'Unknown')),
                                    DataCell(Text(booking['email'] ?? 'Unknown')),
                                    DataCell(Text(booking['phoneNumber'] ?? 'N/A')),
                                    DataCell(Text(booking['bookingType'] ?? 'Unknown')),
                                    DataCell(Text(booking['amount']?.toString() ?? '0')),
                                    DataCell(Text(formatTimestamp(booking['timestamp']))),
                                    DataCell(Text(booking['hotelName'] ?? 'N/A')),
                                    DataCell(Text(booking['paid'] ? 'Yes' : 'No')),
                                  ]);
                                }).toList(),
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  );
                },
              );
            },
          );
        },
      ),
    );
  }
}
